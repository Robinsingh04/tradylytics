@use '../abstracts/variables' as vars;
@use '../abstracts/functions' as func;
@use '../abstracts/mixins' as mix;
@use 'sass:meta';

// Utility classes for margins and paddings

// Generate margin and padding utilities based on spacing scale
$properties: (
  'm': 'margin',
  'p': 'padding'
);

$sides: (
  't': 'top',
  'r': 'right',
  'b': 'bottom',
  'l': 'left',
  'x': ('left', 'right'),
  'y': ('top', 'bottom'),
  '': ''
);

// Loop through each property (margin/padding)
@each $prop-abbr, $prop in $properties {
  // Loop through each side
  @each $side-abbr, $side in $sides {
    // Loop through spacing values
    @each $space-key, $space-value in vars.$spacing {
      // Generate the class name: .m-1, .pt-3, .mx-4, etc.
      $class-name: #{$prop-abbr}#{$side-abbr}-#{$space-key};
      
      .#{$class-name} {
        @if $side == '' {
          // Apply to all sides
          #{$prop}: $space-value !important;
        } @else if meta.type-of($side) == 'list' {
          // Apply to multiple sides (x or y)
          @each $s in $side {
            #{$prop}-#{$s}: $space-value !important;
          }
        } @else {
          // Apply to a single side
          #{$prop}-#{$side}: $space-value !important;
        }
      }
    }
    
    // Add auto margins for flexbox alignment
    @if $prop-abbr == 'm' and ($side-abbr == '' or $side-abbr == 'x' or $side-abbr == 'y' or $side-abbr == 't' or $side-abbr == 'r' or $side-abbr == 'b' or $side-abbr == 'l') {
      .#{$prop-abbr}#{$side-abbr}-auto {
        @if $side == '' {
          margin: auto !important;
        } @else if meta.type-of($side) == 'list' {
          @each $s in $side {
            margin-#{$s}: auto !important;
          }
        } @else {
          margin-#{$side}: auto !important;
        }
      }
    }
  }
}

// Responsive spacing utilities
$breakpoint-suffix: (
  'sm': 'sm',
  'md': 'md',
  'lg': 'lg',
  'xl': 'xl'
);

// Generate responsive spacing utilities
@each $bp-name, $bp-suffix in $breakpoint-suffix {
  @include mix.respond-to($bp-name) {
    @each $prop-abbr, $prop in $properties {
      @each $side-abbr, $side in $sides {
        @each $space-key, $space-value in vars.$spacing {
          // Generate responsive class: .m-1-md, .pt-3-lg, etc.
          $class-name: #{$prop-abbr}#{$side-abbr}-#{$space-key}-#{$bp-suffix};
          
          .#{$class-name} {
            @if $side == '' {
              #{$prop}: $space-value !important;
            } @else if meta.type-of($side) == 'list' {
              @each $s in $side {
                #{$prop}-#{$s}: $space-value !important;
              }
            } @else {
              #{$prop}-#{$side}: $space-value !important;
            }
          }
        }
        
        // Add responsive auto margins
        @if $prop-abbr == 'm' and ($side-abbr == '' or $side-abbr == 'x' or $side-abbr == 'y' or $side-abbr == 't' or $side-abbr == 'r' or $side-abbr == 'b' or $side-abbr == 'l') {
          .#{$prop-abbr}#{$side-abbr}-auto-#{$bp-suffix} {
            @if $side == '' {
              margin: auto !important;
            } @else if meta.type-of($side) == 'list' {
              @each $s in $side {
                margin-#{$s}: auto !important;
              }
            } @else {
              margin-#{$side}: auto !important;
            }
          }
        }
      }
    }
  }
} 